{"version":3,"sources":["components/AssessmentCard.styles.ts","components/AsessmentCard.tsx","API.tsx","utils.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","ButtonWrapper","correct","userClicked","AssessmentCard","question","answers","callback","userAnswer","questionNum","totalNumQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuestions","num","a","fetch","json","data","console","log","results","array","incorrect_answers","correct_answer","sort","Math","random","TOTAL_NUM_QUESTIONS","time","timerElement","document","getElementById","adaptedList","soundPatterned","Audio","soundRandom","App","useState","load","setLoad","questions","setQuestions","setNum","userAns","setUserAns","score","setScore","gameStatus","setGameStatus","listOfQ","setListOfQ","playPatternedSound","pause","concat","play","startQuiz","playRandomSound","playNoSound","newQuestions","setInterval","workingTimer","createElement","innerHTML","GlobalStyle","id","toString","length","undefined","e","currentTarget","previous","answerObj","push","nextQuestion","createGlobalStyle","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2308b990.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    max-width = 1200px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 15px;\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\ntransition: all 0.3s easel\n:hover {\n    opacity 0.7;\n}\nbutton{\n    cursor: pointer;\n    user-select:none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({correct, userClicked}) =>\n        correct ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n            : !correct && userClicked? \n            'linear-gradient(90deg, #ff5656, #c16868)'\n            :'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0 px rgba(0,0,0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0,0,0,0.25)\n\n}\n}`","import React from 'react';\nimport {AnswerObj} from '../App'\nimport {Wrapper, ButtonWrapper} from './AssessmentCard.styles';\n \ntype Pro = { \n    answers: string[];\n    question: string;\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObj | undefined;\n    questionNum: number;\n    totalNumQuestions: number;\n}\n\nconst AssessmentCard: React.FC<Pro> = ({question, answers, callback, userAnswer, questionNum, totalNumQuestions}) => (\n<Wrapper>\n    <p className=\"num\">\n        Question: {questionNum}/{totalNumQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question}} />\n    <div>\n        {answers.map((answer) => (\n            <ButtonWrapper key={answer} correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer}> \n                <button disabled={!!userAnswer} value = {answer} onClick={callback}>\n                    <span dangerouslySetInnerHTML={{__html: answer}} />\n                </button>\n            </ButtonWrapper>\n        ))}\n    </div>\n</Wrapper>\n);\n\nexport default AssessmentCard;","import {randomizeArray} from './utils';\n\nexport type QuestionInfo = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = QuestionInfo & {answers: string[]};\n\nexport const fetchQuestions = async(num: number) => {\n    const endpoint = 'https://opentdb.com/api.php?amount=25&category=18&difficulty=medium&type=multiple';\n    const data = await(await fetch(endpoint)).json();\n    console.log(data);\n    return data.results.map((question:QuestionInfo) => ({...question, answers: randomizeArray([...question.incorrect_answers, question.correct_answer,]),}));\n};\n\n","export const randomizeArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","import React, {useState, useEffect} from 'react'\nimport {Component} from 'react';\nimport AssesmentCard from './components/AsessmentCard'\nimport {fetchQuestions} from './API'\nimport {QuestionState} from './API'\nimport {GlobalStyle} from './index'\nimport {Howl, Howler} from 'howler';\nimport { start } from 'repl';\n\nexport type AnswerObj = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_NUM_QUESTIONS = 20;\nlet time = 60;\nconst timerElement = document.getElementById('Timer');\nlet minutes = 1;\nlet seconds = 60;\nlet adaptedList = [\"Performance on this examination is as follows\"];\n\n\n/*const  = new Howl({\n  src:[\"https://soundbible.com/mp3/45min_april_rainstorm-mike-koenig.mp3\"]\n});\nconst soundRandom = new Howl({\n  src:[\"https://soundbible.com/mp3/45min_april_rainstorm-mike-koenig.mp3\"]\n});*/\n\nlet soundPatterned = new Audio(\"https://cf-media.sndcdn.com/scMK645cJirm.128.mp3?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiKjovL2NmLW1lZGlhLnNuZGNkbi5jb20vc2NNSzY0NWNKaXJtLjEyOC5tcDMiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2MTc1MzQ3MTZ9fX1dfQ__&Signature=T1Z8-P1YMhNecx6naHqNh~Ka9YqDGrkRib0QutBfEnSmSlEr4j8huilNCNlGGNdPilhEmSETy7DL2oIini0UT0n7P3MakgEsa7INs4Vnx6k-hYObHZYau6DKV0-4EJZWOZ80tt2Cw5utUWPKXpyPgkrbZfmM2qvwRRPSWE9ZAPc5KW3unysUDoGDwoPNlsNmxJVDTkc-jC2qbGScmTrK1e84S6nNlho9b3Mr5pWa6KG6Xio-eknMCb-OCWxpmF1BczXdAW2pXJO7kAJ43X5YfaAALisQfngaxr60OyMzJvVNRcqgOh-4ibRmdxQ6wc8S3dcytcy1Gc~Q7YImRJxKlA__&Key-Pair-Id=APKAI6TU7MMXM5DG6EPQ\");\nlet soundRandom = new Audio(\"https://cf-media.sndcdn.com/EE4d2XqD9NZi.128.mp3?Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiKjovL2NmLW1lZGlhLnNuZGNkbi5jb20vRUU0ZDJYcUQ5TlppLjEyOC5tcDMiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2MTc1MzQ3NjB9fX1dfQ__&Signature=crucSiN~~DCbe10JGhxVsLvShFOziURpKBp4gjoMqtcI7ezaCFHjgmidtOWi0neZbpBY6YXjLsanKeqsxJZQe-UjNYtPtjaGYuZYblqJVIZH51anKh5zTdakxPRaADutvKZleXkNJ7-Ab8gcL6dOmitt7BzcbNxwPloTh7qY1~pzmfpjNjPkAU6dHxAc7Mf~r9WEkbSv6S7eihlnKMMYy8nxMa57AYQngzTSTsVJNQ9PNoP7z6Fkh4S-J70iesSKer2hlgjx92oyK7EcnYRNNfNhrqwaUtgF9Hm6kKaZRVCfofnAP5sGlDGuBh8Rzt~8dwuSYtTz~KhbNSDoQl7Zmg__&Key-Pair-Id=APKAI6TU7MMXM5DG6EPQ\");\n\nconst App = () => {\n  const [load, setLoad] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [num, setNum] = useState(0);\n  const [userAns, setUserAns] = useState<AnswerObj[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameStatus, setGameStatus] = useState(true);\n  const [listOfQ, setListOfQ] = useState<string[]>();\n\n  console.log(questions);\n\n  const playPatternedSound = async() => {\n    soundRandom.pause()\n    adaptedList.concat(\"Test Type 2\");\n    soundPatterned.play()\n    startQuiz();\n  }\n  const playRandomSound = async() => {\n    soundPatterned.pause()\n    adaptedList.concat(\"Test Type 3\");\n    soundRandom.play()\n    startQuiz();\n  }\n\n  const playNoSound = async() => {\n    soundPatterned.pause()\n    soundRandom.pause()\n    startQuiz();\n  }\n    \n  const startQuiz = async () => {\n    setLoad(true);\n    setGameStatus(false);\n\n    const newQuestions = await fetchQuestions(TOTAL_NUM_QUESTIONS);\n    setInterval(workingTimer, 1000);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAns([]);\n    setNum(0);\n    setLoad(false);\n  };\n\n  const workingTimer = async () => {\n    if(timerElement === null)\n    {\n      document.createElement('Timer');\n    }else\n    timerElement.innerHTML = `0: ${time}`;\n    if(time>0)\n    {\n      time--;\n      seconds--;\n    }\n  }\n\n  const confirmAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameStatus){\n      const answer = e.currentTarget.value;\n      const correct = questions[num].correct_answer === answer;\n      if(correct){\n        setScore(previous => previous + 1);\n      }\n      const answerObj = {question: questions[num].question, answer, correct, correctAnswer: questions[num].correct_answer};\n      setUserAns(previous => [...previous, answerObj])\n      adaptedList.push(` Question ${num+1}: ${correct}, time used: ${60-time}`);\n      setListOfQ(adaptedList);\n      //setInterval(workingTimer, 1000);\n    }\n    else {\n      soundRandom.pause()\n    }\n  };\n\n  const goNext = () => {\n    const nextQuestion = num + 1;\n    if(nextQuestion === TOTAL_NUM_QUESTIONS)\n    {\n      setGameStatus(true);\n    }\n    else \n      time = 60;\n      setNum(nextQuestion);\n      setInterval(workingTimer, 2000);\n  };\n\n  return (\n    <>\n    <GlobalStyle />\n    <div className='App'>\n      <h1> Cognitive Assesment </h1>\n      <p id=\"Timer\">Timer: 00:{time}</p>\n      {listOfQ != null && !gameStatus ? listOfQ.toString() :null}\n      <p>\n        {\"\\n\"}\n      </p>\n      {gameStatus || userAns.length === TOTAL_NUM_QUESTIONS ? (\n        <button className='Start No Distraction Assessment' onClick={playNoSound}>\n        Start the Assessment: Test Type 1</button>)\n      :null}\n      {gameStatus || userAns.length === TOTAL_NUM_QUESTIONS ? (\n        <button className='Start Patterned Distraction Assessment' onClick={playPatternedSound}>\n        Start the Assessment: Test Type 2</button>)\n      :null}\n      {gameStatus || userAns.length === TOTAL_NUM_QUESTIONS ? (\n        <button className='Start Random Distraction Assessment' onClick={playRandomSound}>\n        Start the Assessment: Test Type 3</button>) \n      :null}\n      {!gameStatus ? <p className='scorecard'>Score: {score}</p> :null}\n      {load \n      && <p>Loading Assessment...\n      </p> }\n      {!gameStatus && !load && (<AssesmentCard \n        questionNum={num+1}\n        totalNumQuestions={TOTAL_NUM_QUESTIONS}\n        question={questions[num].question}\n        answers={questions[num].answers}\n        userAnswer={userAns ? userAns[num] : undefined}\n        callback={confirmAnswer}/>)}\n      {!load && !gameStatus && userAns.length === num + 1 && num+1 !== TOTAL_NUM_QUESTIONS &&\n        <button className='nextQuestion' onClick={goNext}> Next </button>}\n     </div>\n     </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport styled, {createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-color: rgb(255,254,252);  \n    background-size: cover;\n    margin: 0;\n    padding: 20px;\n    display: flex;\n    justify-content: center;\n  }`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}